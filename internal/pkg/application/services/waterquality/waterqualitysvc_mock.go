// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package waterquality

import (
	"context"
	"github.com/diwise/api-opendata/internal/pkg/domain"
	"sync"
)

// Ensure, that WaterQualityServiceMock does implement WaterQualityService.
// If this is not the case, regenerate this file with moq.
var _ WaterQualityService = &WaterQualityServiceMock{}

// WaterQualityServiceMock is a mock implementation of WaterQualityService.
//
//	func TestSomethingThatUsesWaterQualityService(t *testing.T) {
//
//		// make and configure a mocked WaterQualityService
//		mockedWaterQualityService := &WaterQualityServiceMock{
//			BrokerFunc: func() string {
//				panic("mock out the Broker method")
//			},
//			GetAllFunc: func(ctx context.Context) []domain.WaterQuality {
//				panic("mock out the GetAll method")
//			},
//			GetAllNearPointFunc: func(ctx context.Context, pt Point, distance int) ([]domain.WaterQuality, error) {
//				panic("mock out the GetAllNearPoint method")
//			},
//			GetByIDFunc: func(ctx context.Context, id string) (*domain.WaterQualityTemporal, error) {
//				panic("mock out the GetByID method")
//			},
//			ShutdownFunc: func(ctx context.Context)  {
//				panic("mock out the Shutdown method")
//			},
//			StartFunc: func(ctx context.Context)  {
//				panic("mock out the Start method")
//			},
//			TenantFunc: func() string {
//				panic("mock out the Tenant method")
//			},
//		}
//
//		// use mockedWaterQualityService in code that requires WaterQualityService
//		// and then make assertions.
//
//	}
type WaterQualityServiceMock struct {
	// BrokerFunc mocks the Broker method.
	BrokerFunc func() string

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) []domain.WaterQuality

	// GetAllNearPointFunc mocks the GetAllNearPoint method.
	GetAllNearPointFunc func(ctx context.Context, pt Point, distance int) ([]domain.WaterQuality, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (*domain.WaterQualityTemporal, error)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context)

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context)

	// TenantFunc mocks the Tenant method.
	TenantFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Broker holds details about calls to the Broker method.
		Broker []struct {
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllNearPoint holds details about calls to the GetAllNearPoint method.
		GetAllNearPoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Pt is the pt argument value.
			Pt Point
			// Distance is the distance argument value.
			Distance int
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Tenant holds details about calls to the Tenant method.
		Tenant []struct {
		}
	}
	lockBroker          sync.RWMutex
	lockGetAll          sync.RWMutex
	lockGetAllNearPoint sync.RWMutex
	lockGetByID         sync.RWMutex
	lockShutdown        sync.RWMutex
	lockStart           sync.RWMutex
	lockTenant          sync.RWMutex
}

// Broker calls BrokerFunc.
func (mock *WaterQualityServiceMock) Broker() string {
	if mock.BrokerFunc == nil {
		panic("WaterQualityServiceMock.BrokerFunc: method is nil but WaterQualityService.Broker was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBroker.Lock()
	mock.calls.Broker = append(mock.calls.Broker, callInfo)
	mock.lockBroker.Unlock()
	return mock.BrokerFunc()
}

// BrokerCalls gets all the calls that were made to Broker.
// Check the length with:
//
//	len(mockedWaterQualityService.BrokerCalls())
func (mock *WaterQualityServiceMock) BrokerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBroker.RLock()
	calls = mock.calls.Broker
	mock.lockBroker.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *WaterQualityServiceMock) GetAll(ctx context.Context) []domain.WaterQuality {
	if mock.GetAllFunc == nil {
		panic("WaterQualityServiceMock.GetAllFunc: method is nil but WaterQualityService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedWaterQualityService.GetAllCalls())
func (mock *WaterQualityServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetAllNearPoint calls GetAllNearPointFunc.
func (mock *WaterQualityServiceMock) GetAllNearPoint(ctx context.Context, pt Point, distance int) ([]domain.WaterQuality, error) {
	if mock.GetAllNearPointFunc == nil {
		panic("WaterQualityServiceMock.GetAllNearPointFunc: method is nil but WaterQualityService.GetAllNearPoint was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Pt       Point
		Distance int
	}{
		Ctx:      ctx,
		Pt:       pt,
		Distance: distance,
	}
	mock.lockGetAllNearPoint.Lock()
	mock.calls.GetAllNearPoint = append(mock.calls.GetAllNearPoint, callInfo)
	mock.lockGetAllNearPoint.Unlock()
	return mock.GetAllNearPointFunc(ctx, pt, distance)
}

// GetAllNearPointCalls gets all the calls that were made to GetAllNearPoint.
// Check the length with:
//
//	len(mockedWaterQualityService.GetAllNearPointCalls())
func (mock *WaterQualityServiceMock) GetAllNearPointCalls() []struct {
	Ctx      context.Context
	Pt       Point
	Distance int
} {
	var calls []struct {
		Ctx      context.Context
		Pt       Point
		Distance int
	}
	mock.lockGetAllNearPoint.RLock()
	calls = mock.calls.GetAllNearPoint
	mock.lockGetAllNearPoint.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *WaterQualityServiceMock) GetByID(ctx context.Context, id string) (*domain.WaterQualityTemporal, error) {
	if mock.GetByIDFunc == nil {
		panic("WaterQualityServiceMock.GetByIDFunc: method is nil but WaterQualityService.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedWaterQualityService.GetByIDCalls())
func (mock *WaterQualityServiceMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *WaterQualityServiceMock) Shutdown(ctx context.Context) {
	if mock.ShutdownFunc == nil {
		panic("WaterQualityServiceMock.ShutdownFunc: method is nil but WaterQualityService.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedWaterQualityService.ShutdownCalls())
func (mock *WaterQualityServiceMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *WaterQualityServiceMock) Start(ctx context.Context) {
	if mock.StartFunc == nil {
		panic("WaterQualityServiceMock.StartFunc: method is nil but WaterQualityService.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedWaterQualityService.StartCalls())
func (mock *WaterQualityServiceMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Tenant calls TenantFunc.
func (mock *WaterQualityServiceMock) Tenant() string {
	if mock.TenantFunc == nil {
		panic("WaterQualityServiceMock.TenantFunc: method is nil but WaterQualityService.Tenant was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTenant.Lock()
	mock.calls.Tenant = append(mock.calls.Tenant, callInfo)
	mock.lockTenant.Unlock()
	return mock.TenantFunc()
}

// TenantCalls gets all the calls that were made to Tenant.
// Check the length with:
//
//	len(mockedWaterQualityService.TenantCalls())
func (mock *WaterQualityServiceMock) TenantCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTenant.RLock()
	calls = mock.calls.Tenant
	mock.lockTenant.RUnlock()
	return calls
}
