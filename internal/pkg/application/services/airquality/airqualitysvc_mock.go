// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package airquality

import (
	"context"
	"github.com/diwise/api-opendata/internal/pkg/domain"
	"sync"
	"time"
)

// Ensure, that AirQualityServiceMock does implement AirQualityService.
// If this is not the case, regenerate this file with moq.
var _ AirQualityService = &AirQualityServiceMock{}

// AirQualityServiceMock is a mock implementation of AirQualityService.
//
// 	func TestSomethingThatUsesAirQualityService(t *testing.T) {
//
// 		// make and configure a mocked AirQualityService
// 		mockedAirQualityService := &AirQualityServiceMock{
// 			GetAllFunc: func(ctx context.Context) []domain.AirQuality {
// 				panic("mock out the GetAll method")
// 			},
// 			GetByIDFunc: func(ctx context.Context, id string) (*domain.AirQualityDetails, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			GetByIDWithTimespanFunc: func(ctx context.Context, id string, from time.Time, to time.Time) (*domain.AirQualityDetails, error) {
// 				panic("mock out the GetByIDWithTimespan method")
// 			},
// 			RefreshFunc: func(ctx context.Context) (int, error) {
// 				panic("mock out the Refresh method")
// 			},
// 			ShutdownFunc: func(ctx context.Context)  {
// 				panic("mock out the Shutdown method")
// 			},
// 			StartFunc: func(ctx context.Context)  {
// 				panic("mock out the Start method")
// 			},
// 			TenantFunc: func() string {
// 				panic("mock out the Tenant method")
// 			},
// 		}
//
// 		// use mockedAirQualityService in code that requires AirQualityService
// 		// and then make assertions.
//
// 	}
type AirQualityServiceMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) []domain.AirQuality

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (*domain.AirQualityDetails, error)

	// GetByIDWithTimespanFunc mocks the GetByIDWithTimespan method.
	GetByIDWithTimespanFunc func(ctx context.Context, id string, from time.Time, to time.Time) (*domain.AirQualityDetails, error)

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(ctx context.Context) (int, error)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context)

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context)

	// TenantFunc mocks the Tenant method.
	TenantFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetByIDWithTimespan holds details about calls to the GetByIDWithTimespan method.
		GetByIDWithTimespan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Tenant holds details about calls to the Tenant method.
		Tenant []struct {
		}
	}
	lockGetAll              sync.RWMutex
	lockGetByID             sync.RWMutex
	lockGetByIDWithTimespan sync.RWMutex
	lockRefresh             sync.RWMutex
	lockShutdown            sync.RWMutex
	lockStart               sync.RWMutex
	lockTenant              sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *AirQualityServiceMock) GetAll(ctx context.Context) []domain.AirQuality {
	if mock.GetAllFunc == nil {
		panic("AirQualityServiceMock.GetAllFunc: method is nil but AirQualityService.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//     len(mockedAirQualityService.GetAllCalls())
func (mock *AirQualityServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *AirQualityServiceMock) GetByID(ctx context.Context, id string) (*domain.AirQualityDetails, error) {
	if mock.GetByIDFunc == nil {
		panic("AirQualityServiceMock.GetByIDFunc: method is nil but AirQualityService.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedAirQualityService.GetByIDCalls())
func (mock *AirQualityServiceMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetByIDWithTimespan calls GetByIDWithTimespanFunc.
func (mock *AirQualityServiceMock) GetByIDWithTimespan(ctx context.Context, id string, from time.Time, to time.Time) (*domain.AirQualityDetails, error) {
	if mock.GetByIDWithTimespanFunc == nil {
		panic("AirQualityServiceMock.GetByIDWithTimespanFunc: method is nil but AirQualityService.GetByIDWithTimespan was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		From time.Time
		To   time.Time
	}{
		Ctx:  ctx,
		ID:   id,
		From: from,
		To:   to,
	}
	mock.lockGetByIDWithTimespan.Lock()
	mock.calls.GetByIDWithTimespan = append(mock.calls.GetByIDWithTimespan, callInfo)
	mock.lockGetByIDWithTimespan.Unlock()
	return mock.GetByIDWithTimespanFunc(ctx, id, from, to)
}

// GetByIDWithTimespanCalls gets all the calls that were made to GetByIDWithTimespan.
// Check the length with:
//     len(mockedAirQualityService.GetByIDWithTimespanCalls())
func (mock *AirQualityServiceMock) GetByIDWithTimespanCalls() []struct {
	Ctx  context.Context
	ID   string
	From time.Time
	To   time.Time
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		From time.Time
		To   time.Time
	}
	mock.lockGetByIDWithTimespan.RLock()
	calls = mock.calls.GetByIDWithTimespan
	mock.lockGetByIDWithTimespan.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *AirQualityServiceMock) Refresh(ctx context.Context) (int, error) {
	if mock.RefreshFunc == nil {
		panic("AirQualityServiceMock.RefreshFunc: method is nil but AirQualityService.Refresh was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(ctx)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//     len(mockedAirQualityService.RefreshCalls())
func (mock *AirQualityServiceMock) RefreshCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *AirQualityServiceMock) Shutdown(ctx context.Context) {
	if mock.ShutdownFunc == nil {
		panic("AirQualityServiceMock.ShutdownFunc: method is nil but AirQualityService.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//     len(mockedAirQualityService.ShutdownCalls())
func (mock *AirQualityServiceMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *AirQualityServiceMock) Start(ctx context.Context) {
	if mock.StartFunc == nil {
		panic("AirQualityServiceMock.StartFunc: method is nil but AirQualityService.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedAirQualityService.StartCalls())
func (mock *AirQualityServiceMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Tenant calls TenantFunc.
func (mock *AirQualityServiceMock) Tenant() string {
	if mock.TenantFunc == nil {
		panic("AirQualityServiceMock.TenantFunc: method is nil but AirQualityService.Tenant was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTenant.Lock()
	mock.calls.Tenant = append(mock.calls.Tenant, callInfo)
	mock.lockTenant.Unlock()
	return mock.TenantFunc()
}

// TenantCalls gets all the calls that were made to Tenant.
// Check the length with:
//     len(mockedAirQualityService.TenantCalls())
func (mock *AirQualityServiceMock) TenantCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTenant.RLock()
	calls = mock.calls.Tenant
	mock.lockTenant.RUnlock()
	return calls
}
