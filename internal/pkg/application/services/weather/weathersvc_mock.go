// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package weather

import (
	"sync"
)

// Ensure, that WeatherServiceMock does implement WeatherService.
// If this is not the case, regenerate this file with moq.
var _ WeatherService = &WeatherServiceMock{}

// WeatherServiceMock is a mock implementation of WeatherService.
//
//	func TestSomethingThatUsesWeatherService(t *testing.T) {
//
//		// make and configure a mocked WeatherService
//		mockedWeatherService := &WeatherServiceMock{
//			QueryFunc: func() WeatherServiceQuery {
//				panic("mock out the Query method")
//			},
//		}
//
//		// use mockedWeatherService in code that requires WeatherService
//		// and then make assertions.
//
//	}
type WeatherServiceMock struct {
	// QueryFunc mocks the Query method.
	QueryFunc func() WeatherServiceQuery

	// calls tracks calls to the methods.
	calls struct {
		// Query holds details about calls to the Query method.
		Query []struct {
		}
	}
	lockQuery sync.RWMutex
}

// Query calls QueryFunc.
func (mock *WeatherServiceMock) Query() WeatherServiceQuery {
	if mock.QueryFunc == nil {
		panic("WeatherServiceMock.QueryFunc: method is nil but WeatherService.Query was just called")
	}
	callInfo := struct {
	}{}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc()
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedWeatherService.QueryCalls())
func (mock *WeatherServiceMock) QueryCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}
