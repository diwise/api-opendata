// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package exercisetrails

import (
	"context"
	"github.com/diwise/api-opendata/internal/pkg/domain"
	"sync"
)

// Ensure, that ExerciseTrailServiceMock does implement ExerciseTrailService.
// If this is not the case, regenerate this file with moq.
var _ ExerciseTrailService = &ExerciseTrailServiceMock{}

// ExerciseTrailServiceMock is a mock implementation of ExerciseTrailService.
//
//	func TestSomethingThatUsesExerciseTrailService(t *testing.T) {
//
//		// make and configure a mocked ExerciseTrailService
//		mockedExerciseTrailService := &ExerciseTrailServiceMock{
//			BrokerFunc: func() string {
//				panic("mock out the Broker method")
//			},
//			GetAllFunc: func(requiredCategories []string) []domain.ExerciseTrail {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(id string) (*domain.ExerciseTrail, error) {
//				panic("mock out the GetByID method")
//			},
//			ShutdownFunc: func(ctx context.Context)  {
//				panic("mock out the Shutdown method")
//			},
//			StartFunc: func(ctx context.Context)  {
//				panic("mock out the Start method")
//			},
//			TenantFunc: func() string {
//				panic("mock out the Tenant method")
//			},
//		}
//
//		// use mockedExerciseTrailService in code that requires ExerciseTrailService
//		// and then make assertions.
//
//	}
type ExerciseTrailServiceMock struct {
	// BrokerFunc mocks the Broker method.
	BrokerFunc func() string

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(requiredCategories []string) []domain.ExerciseTrail

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id string) (*domain.ExerciseTrail, error)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context)

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context)

	// TenantFunc mocks the Tenant method.
	TenantFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Broker holds details about calls to the Broker method.
		Broker []struct {
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// RequiredCategories is the requiredCategories argument value.
			RequiredCategories []string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID string
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Tenant holds details about calls to the Tenant method.
		Tenant []struct {
		}
	}
	lockBroker   sync.RWMutex
	lockGetAll   sync.RWMutex
	lockGetByID  sync.RWMutex
	lockShutdown sync.RWMutex
	lockStart    sync.RWMutex
	lockTenant   sync.RWMutex
}

// Broker calls BrokerFunc.
func (mock *ExerciseTrailServiceMock) Broker() string {
	if mock.BrokerFunc == nil {
		panic("ExerciseTrailServiceMock.BrokerFunc: method is nil but ExerciseTrailService.Broker was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBroker.Lock()
	mock.calls.Broker = append(mock.calls.Broker, callInfo)
	mock.lockBroker.Unlock()
	return mock.BrokerFunc()
}

// BrokerCalls gets all the calls that were made to Broker.
// Check the length with:
//
//	len(mockedExerciseTrailService.BrokerCalls())
func (mock *ExerciseTrailServiceMock) BrokerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBroker.RLock()
	calls = mock.calls.Broker
	mock.lockBroker.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ExerciseTrailServiceMock) GetAll(requiredCategories []string) []domain.ExerciseTrail {
	if mock.GetAllFunc == nil {
		panic("ExerciseTrailServiceMock.GetAllFunc: method is nil but ExerciseTrailService.GetAll was just called")
	}
	callInfo := struct {
		RequiredCategories []string
	}{
		RequiredCategories: requiredCategories,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(requiredCategories)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedExerciseTrailService.GetAllCalls())
func (mock *ExerciseTrailServiceMock) GetAllCalls() []struct {
	RequiredCategories []string
} {
	var calls []struct {
		RequiredCategories []string
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ExerciseTrailServiceMock) GetByID(id string) (*domain.ExerciseTrail, error) {
	if mock.GetByIDFunc == nil {
		panic("ExerciseTrailServiceMock.GetByIDFunc: method is nil but ExerciseTrailService.GetByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedExerciseTrailService.GetByIDCalls())
func (mock *ExerciseTrailServiceMock) GetByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *ExerciseTrailServiceMock) Shutdown(ctx context.Context) {
	if mock.ShutdownFunc == nil {
		panic("ExerciseTrailServiceMock.ShutdownFunc: method is nil but ExerciseTrailService.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedExerciseTrailService.ShutdownCalls())
func (mock *ExerciseTrailServiceMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ExerciseTrailServiceMock) Start(ctx context.Context) {
	if mock.StartFunc == nil {
		panic("ExerciseTrailServiceMock.StartFunc: method is nil but ExerciseTrailService.Start was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc(ctx)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedExerciseTrailService.StartCalls())
func (mock *ExerciseTrailServiceMock) StartCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Tenant calls TenantFunc.
func (mock *ExerciseTrailServiceMock) Tenant() string {
	if mock.TenantFunc == nil {
		panic("ExerciseTrailServiceMock.TenantFunc: method is nil but ExerciseTrailService.Tenant was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTenant.Lock()
	mock.calls.Tenant = append(mock.calls.Tenant, callInfo)
	mock.lockTenant.Unlock()
	return mock.TenantFunc()
}

// TenantCalls gets all the calls that were made to Tenant.
// Check the length with:
//
//	len(mockedExerciseTrailService.TenantCalls())
func (mock *ExerciseTrailServiceMock) TenantCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTenant.RLock()
	calls = mock.calls.Tenant
	mock.lockTenant.RUnlock()
	return calls
}
