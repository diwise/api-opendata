// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/diwise/api-opendata/internal/pkg/domain"
	"sync"
	"time"
)

// Ensure, that TempServiceMock does implement TempService.
// If this is not the case, regenerate this file with moq.
var _ TempService = &TempServiceMock{}

// TempServiceMock is a mock implementation of TempService.
//
// 	func TestSomethingThatUsesTempService(t *testing.T) {
//
// 		// make and configure a mocked TempService
// 		mockedTempService := &TempServiceMock{
// 			GetFunc: func(from time.Time, to time.Time) ([]domain.Temperature, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedTempService in code that requires TempService
// 		// and then make assertions.
//
// 	}
type TempServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(from time.Time, to time.Time) ([]domain.Temperature, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *TempServiceMock) Get(from time.Time, to time.Time) ([]domain.Temperature, error) {
	callInfo := struct {
		From time.Time
		To   time.Time
	}{
		From: from,
		To:   to,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			temperaturesOut []domain.Temperature
			errOut          error
		)
		return temperaturesOut, errOut
	}
	return mock.GetFunc(from, to)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedTempService.GetCalls())
func (mock *TempServiceMock) GetCalls() []struct {
	From time.Time
	To   time.Time
} {
	var calls []struct {
		From time.Time
		To   time.Time
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
